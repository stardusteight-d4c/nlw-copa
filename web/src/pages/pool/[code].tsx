import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { Header } from '../../components/pool/Header'
import { GuessModal } from '../../components/pool/GuessModal'
import { Guess } from '../../components/pool/Guess'
import { api } from '../../lib/axios'
import {
  getParticipants,
  guessesByPoolId,
  guessesByUserId,
  poolByCode,
} from '../../services/api-routes'
import { useAppSelector } from '../../store/hooks'
import { selectUser } from '../../store/userSlice'
import { RankingItem } from '../../components/pool/RankingItem'

interface Props {
  pool: [Pool]
}

export default function PoolCode({ pool }: Props) {
  const poolData = pool[0]
  const [activeItem, setActiveItem] = useState('your_guesses')
  const [openModal, setOpenModal] = useState(false)
  const [guesses, setGuesses] = useState([])
  const [userGuesses, setUserGuesses] = useState([])
  const currentUser = useAppSelector(selectUser)
  const [participants, setParticipants] = useState<any>([])

  useEffect(() => {
    ;(async () => {
      await api
        .get(getParticipants, {
          params: {
            poolId: poolData.id,
          },
        })
        .then(({ data }) => {
          console.log('data', data)

          setParticipants(data)
        })
        .catch((error) => console.log(error.toJSON()))
    })()
  }, [pool])

  useEffect(() => {
    ;(async () => {
      await api
        .get(guessesByPoolId, {
          params: {
            poolId: poolData.id,
          },
        })
        .then(({ data }) => setGuesses(data.guesses))
        .catch((error) => console.log(error.toJSON()))
    })()
  }, [poolData])

  useEffect(() => {
    ;(async () => {
      await api
        .get(guessesByUserId, {
          params: {
            userId: currentUser?.id,
            poolId: poolData.id,
          },
        })
        .then(({ data }) => setUserGuesses(data.guesses))
        .catch((error) => console.log(error.toJSON()))
    })()
  }, [poolData, currentUser])

  useEffect(() => {
    const html = document.querySelector('html')
    if (html) {
      openModal
        ? ((html.style.overflow = 'hidden'),
          (html.style.maxHeight = '100vh'),
          (html.style.position = 'fixed'))
        : ((html.style.overflow = 'auto'),
          (html.style.maxHeight = 'auto'),
          (html.style.position = 'relative'))
    }
  }, [openModal])

  return (
    <>
      <Head>
        <title>NLW Copa | Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {openModal && (
        <GuessModal setOpenModal={setOpenModal} poolId={poolData.id} />
      )}

      <main className="w-screen min-h-screen mb-14 bg-gray-900 ">
        <Header pool={poolData} participants={participants} />
        <section className="bg-gray-800 w-[600px] mt-8 mx-auto rounded text-white shadow-xl">
          <div className="w-[600px] mx-auto">
            <button
              onClick={() => setOpenModal(true)}
              className="bg-ignite-500 hover:brightness-110 w-full text-white font-bold text-sm uppercase px-6 py-4 rounded-t"
            >
              Criar palpite
            </button>
          </div>
          <div>
            <div className="font-bold rounded gap-x-2 flex justify-between min-h-[50px] max-h-[50px] p-2">
              <span
                onClick={() => setActiveItem('your_guesses')}
                className={`${
                  activeItem === 'your_guesses' && 'bg-gray-600'
                } rounded cursor-pointer flex items-center w-full justify-center min-h-full px-4`}
              >
                Seus palpites
              </span>
              <span
                onClick={() => setActiveItem('all_guesses')}
                className={`${
                  activeItem === 'all_guesses' && 'bg-gray-600'
                } rounded cursor-pointer flex items-center w-full justify-center min-h-full px-4`}
              >
                Todos palpites
              </span>
              <span
                onClick={() => setActiveItem('group_ranking')}
                className={`${
                  activeItem === 'group_ranking' && 'bg-gray-600'
                } rounded cursor-pointer flex items-center w-full justify-center min-h-full px-4`}
              >
                Ranking do grupo
              </span>
            </div>
          </div>
        </section>
        {activeItem === 'your_guesses' && guesses && (
          <>
            {userGuesses.map((guess: ParticipantGuesses, index) => (
              <Guess key={index} guess={guess} yourGuesses={true} />
            ))}
          </>
        )}
        {activeItem === 'all_guesses' && guesses && (
          <>
            {guesses.map((guess: ParticipantGuesses, index) => (
              <Guess key={index} guess={guess} />
            ))}
          </>
        )}
        {activeItem === 'group_ranking' && (
          <>
            {participants.participants.map((participant: any, index: any) => (
              <RankingItem participant={participant} index={index} />
            ))}
          </>
        )}
      </main>
    </>
  )
}

export const getServerSideProps = async (context: any) => {
  const pool = await api
    .get(poolByCode, {
      params: {
        code: context.params.code,
      },
    })
    .then(({ data }) => data)
    .catch((error) => console.log(error.toJSON()))

  return {
    props: {
      ...pool,
    },
  }
}
