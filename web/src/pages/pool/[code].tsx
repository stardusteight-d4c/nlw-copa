import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { Header } from '../../components/pool/Header'
import { GuessModal } from '../../components/pool/GuessModal'
import { Guess } from '../../components/pool/Guess'
import { api } from '../../lib/axios'
import { poolByCode } from '../../services/api-routes'
import { RankingItem } from '../../components/pool/RankingItem'
import { Menu } from '../../components/pool/Menu'
import { FetchCodeData } from '../../components/pool/integrate/FetchCodeData'

export const getServerSideProps = async (context: any) => {
  const pool = await api
    .get(poolByCode, {
      params: {
        code: context.params.code,
      },
    })
    .then(({ data }) => data)
    .catch((error) => console.log(error.toJSON()))

  return {
    props: {
      ...pool,
    },
  }
}

interface Props {
  pool: [Pool]
}

export default function PoolCode({ pool }: Props) {
  const poolData = pool[0]
  const [activeItem, setActiveItem] = useState('your_guesses')
  const [openModal, setOpenModal] = useState(false)
  const [guesses, setGuesses] = useState([])
  const [userGuesses, setUserGuesses] = useState([])
  const [participants, setParticipants] = useState<any>([])
  const [ranking, setRanking] = useState<any>([])

  const getDataProps = {
    pool,
    poolData,
    setParticipants,
    setRanking,
    setGuesses,
    setUserGuesses,
  }

  useEffect(() => {
    const html = document.querySelector('html')
    if (html) {
      openModal
        ? ((html.style.overflow = 'hidden'),
          (html.style.maxHeight = '100vh'),
          (html.style.position = 'fixed'))
        : ((html.style.overflow = 'auto'),
          (html.style.maxHeight = 'auto'),
          (html.style.position = 'relative'))
    }
  }, [openModal])

  const rendersModal = () => (
    <>
      {openModal && (
        <GuessModal setOpenModal={setOpenModal} poolId={poolData.id} />
      )}
    </>
  )

  const rendersUserGuesses = () => (
    <>
      {userGuesses.map((guess: ParticipantGuesses, index) => (
        <Guess
          key={index}
          guess={guess}
          yourGuesses={true}
          poolOwner={poolData.ownerId}
        />
      ))}
    </>
  )

  const rendersAllGuesses = () => (
    <>
      {guesses.map((guess: ParticipantGuesses, index) => (
        <Guess key={index} guess={guess} poolOwner={poolData.ownerId} />
      ))}
    </>
  )

  const rendersRanking = () => (
    <>
      {ranking.participants.map((participant: any, index: any) => (
        <RankingItem key={index} participant={participant} index={index} />
      ))}
    </>
  )

  return (
    <>
      <FetchCodeData {...getDataProps} />
      <Head>
        <title>NLW Copa | Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {rendersModal()}

      <Header pool={poolData} participants={participants} />
      <main className={style.wrapper}>
        <Menu
          activeItem={activeItem}
          setActiveItem={setActiveItem}
          setOpenModal={setOpenModal}
        />
        {activeItem === 'your_guesses' && guesses && rendersUserGuesses()}
        {activeItem === 'all_guesses' && guesses && rendersAllGuesses()}
        {activeItem === 'group_ranking' && rendersRanking()}
      </main>
    </>
  )
}

const style = {
  wrapper: `w-screen p-2 md:p-0 min-h-screen mb-14 bg-gray-900`,
}
