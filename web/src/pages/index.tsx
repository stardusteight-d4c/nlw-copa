import Head from 'next/head'
import Image from 'next/image'
import preview from '../assets/preview-mobile.png'
import logo from '../assets/logo.svg'
import avatars from '../assets/avatars.png'
import check from '../assets/icon-check.svg'
import { api } from '../lib/axios'
import { FormEvent, useState } from 'react'

interface HomeProps {
  poolCount: number
  guessCount: number
  userCount: number
}

export default function Home(props: HomeProps) {
  const [pool, setPool] = useState('')

  async function createPool(event: FormEvent) {
    event?.preventDefault()

    try {
      const response = await api.post('/pools', {
        title: pool,
      })
      const { code } = response.data

      await navigator.clipboard.writeText(code)

      alert('Bol√£o criado, c√≥digo copiado com sucesso')
      setPool('')
    } catch (error) {
      console.log(error)
    }
  }

  const user = true

  const last4participants = [
    { userImg: 'https://avatars.githubusercontent.com/u/87643260?v=4' },
    { userImg: 'https://avatars.githubusercontent.com/u/87643260?v=4' },
    { userImg: 'https://avatars.githubusercontent.com/u/87643260?v=4' },
    { userImg: 'https://avatars.githubusercontent.com/u/87643260?v=4' },
  ]

  const pools: any = []

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-[1124px] mt-10 2xl:mt-0 h-screen mx-auto grid gap-28 grid-cols-2 items-center">
        <section className="col-span-1">
          <Image src={logo} alt="logo/nlw-copa" />
          <h1 className="mt-14 text-white text-5xl font-bold leading-tight">
            Crie seu pr√≥prio bol√£o da copa e compartilhe entre amigos!
          </h1>
          <div className="mt-10 flex items-center gap-x-2">
            <Image
              src={avatars}
              width={150}
              height={50}
              alt="avatars-users/img"
            />

            <strong className="text-gray-100 text-xl">
              <span className="text-ignite-500 mr-2">+{props.userCount}</span>
              pessoas j√° est√£o usando
            </strong>
          </div>

          <form onSubmit={createPool} className="mt-10 flex gap-2">
            <input
              className="flex-1 text-gray-500 placeholder:text-sm outline-none px-6 py-4 rounded bg-gray-800 border border-gray-600"
              type="text"
              required
              onChange={(e) => setPool(e.target.value)}
              placeholder="Qual nome do seu bol√£o?"
              value={pool}
            />
            <button
              className="bg-yellow-500 hover:brightness-110 text-gray-900 font-bold text-sm uppercase px-6 py-4 rounded"
              type="submit"
            >
              Criar meu bol√£o
            </button>
          </form>

          <p className="mt-4 text-sm leading-relaxed text-gray-300">
            Ap√≥s criar seu bol√£o, voc√™ receber√° um c√≥digo √∫nico que poder√° usar
            para convidar outras pessoas üöÄ
          </p>

          <div className="flex items-center justify-between mt-10 py-10 border-t border-gray-600 text-gray-100">
            <div className="flex items-center">
              <Image src={check} alt="check/icon" />
              <div className="flex flex-col items-start p-4">
                <span className="text-2xl font-bold">+{props.poolCount}</span>
                <span>Bol√µes criados</span>
              </div>
            </div>
            <div className="h-[63px] w-px bg-gray-600" />
            <div className="flex items-center">
              <Image src={check} alt="check/icon" />
              <div className="flex flex-col items-start p-4">
                <span className="text-2xl font-bold">+{props.guessCount}</span>
                <span>Palpites enviados</span>
              </div>
            </div>
          </div>
        </section>

        <section className="col-span-1">
          {user ? (
            <div className="bg-gray-800 min-w-full text-white p-4 shadow-xl">
              <h1 className="text-center font-bold text-2xl mb-4">
                Meus bolo·∫Ωs
              </h1>
              <>
                {pools ? (
                  <div className="bg-gray-600 p-2 rounded cursor-pointer flex justify-between items-center">
                    <div className="flex-1 flex-grow">
                      <h3 className="font-bold text-lg">Bol√£o Xablau</h3>
                      <span className="text-gray-200">C√≥digo: SAS5D45</span>
                    </div>
                    <div className="relative items-center justify-center flex-grow -top-[18px]">
                      {last4participants.map((user, index) => {
                        const position = index === 0 ? 27 : (index + 1) * 27
                        return (
                          <img
                            src={user.userImg}
                            className="rounded-full w-10 h-10 absolute border-[2px] border-gray-600"
                            style={{ right: position, zIndex: 4 - index }}
                          />
                        )
                      })}
                      <div className="rounded-full w-10 h-10 absolute z-10 right-1 flex items-center justify-center bg-[#29292E] border-[2px] border-gray-600 tracking-widest">
                        +8
                      </div>
                    </div>
                  </div>
                ) : (
                  <>Sem bol√µes ainda</>
                )}
              </>
            </div>
          ) : (
            <Image src={preview} alt="preview/img" />
          )}
        </section>
      </main>
    </>
  )
}

export const getServerSideProps = async () => {
  const [poolCountResponse, guessCountResponse, userCountResponse] =
    await Promise.all([
      api.get('pools/count'),
      api.get('guesses/count'),
      api.get('users/count'),
    ])

  return {
    props: {
      poolCount: poolCountResponse.data.count,
      guessCount: guessCountResponse.data.count,
      userCount: userCountResponse.data.count,
    },
  }
}
